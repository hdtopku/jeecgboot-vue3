var e=(e,r,t)=>new Promise(((i,s)=>{var o=e=>{try{c(t.next(e))}catch(r){s(r)}},a=e=>{try{c(t.throw(e))}catch(r){s(r)}},c=e=>e.done?i(e.value):Promise.resolve(e.value).then(o,a);c((t=t.apply(e,r)).next())}));import{a4 as r}from"./index.b2c24a42.js";import{d as t}from"./user.api.ceae0e75.js";const i={rule(e,r){return"email"===e?this.email(r):"phone"===e?this.phone(r):void 0},email(r){return[{required:r||!1,validator:(t,i)=>e(this,null,(function*(){return 1!=r||i?i&&!new RegExp(/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/).test(i)?Promise.reject("请输入正确邮箱格式!"):Promise.resolve():Promise.reject("请输入邮箱!")})),trigger:"change"}]},phone(r){return[{required:r,validator:(t,i)=>e(this,null,(function*(){return r&&!i?Promise.reject("请输入手机号码1!"):new RegExp(/^1[3|4|5|7|8|9][0-9]\d{8}$/).test(i)?Promise.resolve():Promise.reject("手机号码格式有误")})),trigger:"change"}]},startTime:(e,t)=>[{required:t||!1,validator:(i,s)=>t&&!s?Promise.reject("请选择开始时间"):e&&s&&r(e).isBefore(s)?Promise.reject("开始时间需小于结束时间"):Promise.resolve(),trigger:"change"}],endTime:(e,t)=>[{required:t||!1,validator:(i,s)=>t&&!s?Promise.reject("请选择结束时间"):e&&s&&r(s).isBefore(e)?Promise.reject("结束时间需大于开始时间"):Promise.resolve(),trigger:"change"}],confirmPassword:(e,r)=>[{required:r||!1,validator:(r,t)=>t?t!==e.password?Promise.reject("两次输入的密码不一致!"):Promise.resolve():Promise.reject("密码不能为空")}],duplicateCheckRule:(e,r,i,s,o)=>[{validator:(a,c)=>!c&&o?Promise.reject(`请输入${s.label}`):new Promise(((s,o)=>{t({tableName:e,fieldName:r,fieldVal:c,dataId:i.id}).then((e=>{e.success?s():o(e.message||"校验失败")})).catch((e=>{o(e.message||"验证失败")}))}))}]};function s(r,i,s,o){return e(this,null,(function*(){try{let e={tableName:r,fieldName:i,fieldVal:s,dataId:o};const a=yield t(e);return a.success?Promise.resolve():Promise.reject(a.message||"校验失败")}catch(e){return Promise.reject("校验失败,可能是断网等问题导致的校验失败")}}))}export{s as duplicateValidate,i as rules};
